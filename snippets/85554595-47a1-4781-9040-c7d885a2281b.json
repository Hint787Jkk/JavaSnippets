{
  "uuid": "85554595-47a1-4781-9040-c7d885a2281b",
  "name": "validated date",
  "description": "validates date",
  "extraSearchTerms": [],
  "tags": [
    "php"
  ],
  "code": "function validateDate($$date, $$format \u003d \u0027d.m.Y\u0027) {\r\n\t\t$$d \u003d DateTime::createFromFormat ( $$format, $$date );\r\n\t\treturn $$d \u0026\u0026 $$d-\u003eformat ( $$format ) \u003d\u003d $$date;\r\n\t}\r\n\r\n\r\n/*\r\nformat character\tDescription\tExample parsable values\r\nDay\t---\t---\r\nd and j\tDay of the month, 2 digits with or without leading zeros\t01 to 31 or 1 to 31\r\nD and l\tA textual representation of a day\tMon through Sun or Sunday through Saturday\r\nS\tEnglish ordinal suffix for the day of the month, 2 characters. It\u0027s ignored while processing.\tst, nd, rd or th.\r\nz\tThe day of the year (starting from 0)\t0 through 365\r\nMonth\t---\t---\r\nF and M\tA textual representation of a month, such as January or Sept\tJanuary through December or Jan through Dec\r\nm and n\tNumeric representation of a month, with or without leading zeros\t01 through 12 or 1 through 12\r\nYear\t---\t---\r\nY\tA full numeric representation of a year, 4 digits\tExamples: 1999 or 2003\r\ny\tA two digit representation of a year (which is assumed to be in the range 1970-2069, inclusive)\tExamples: 99 or 03 (which will be interpreted as 1999 and 2003, respectively)\r\nTime\t---\t---\r\na and A\tAnte meridiem and Post meridiem\tam or pm\r\ng and h\t12-hour format of an hour with or without leading zero\t1 through 12 or 01 through 12\r\nG and H\t24-hour format of an hour with or without leading zeros\t0 through 23 or 00 through 23\r\ni\tMinutes with leading zeros\t00 to 59\r\ns\tSeconds, with leading zeros\t00 through 59\r\nu\tMicroseconds (up to six digits)\tExample: 45, 654321\r\nTimezone\t---\t---\r\ne, O, P and T\tTimezone identifier, or difference to UTC in hours, or difference to UTC with colon between hours and minutes, or timezone abbreviation\tExamples: UTC, GMT, Atlantic/Azores or +0200 or +02:00 or EST, MDT\r\nFull Date/Time\t---\t---\r\nU\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\tExample: 1292177455\r\nWhitespace and Separators\t---\t---\r\n(space)\tOne space or one tab\tExample:\r\n#\tOne of the following separation symbol: ;, :, /, ., ,, -, ( or )\tExample: /\r\n;, :, /, ., ,, -, ( or )\tThe specified character.\tExample: -\r\n?\tA random byte\tExample: ^ (Be aware that for UTF-8 characters you might need more than one ?. In this case, using * is probably what you want instead)\r\n*\tRandom bytes until the next separator or digit\tExample: * in Y-*-d with the string 2009-aWord-08 will match aWord\r\n!\tResets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch\tWithout !, all fields will be set to the current date and time.\r\n|\tResets all fields (year, month, day, hour, minute, second, fraction and timzone information) to the Unix Epoch if they have not been parsed yet\tY-m-d| will set the year, month and day to the information found in the string to parse, and sets the hour, minute and second to 0.\r\n+\tIf this format specifier is present, trailing data in the string will not cause an error, but a warning instead\tUse DateTime::getLastErrors() to find out whether trailing data was present.\r\n*/",
  "location": "GENERIC_FILE",
  "filenameRestrictions": [
    ".php"
  ],
  "dependencies": []
}